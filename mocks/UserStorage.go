// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	storage "github.com/fridrock/avito-shop/storage"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserStorage is an autogenerated mock type for the UserStorage type
type UserStorage struct {
	mock.Mock
}

// CheckEnoughCoins provides a mock function with given fields: _a0, _a1
func (_m *UserStorage) CheckEnoughCoins(_a0 int, _a1 uuid.UUID) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckEnoughCoins")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, uuid.UUID) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindUserByUsername provides a mock function with given fields: _a0
func (_m *UserStorage) FindUserByUsername(_a0 string) (storage.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (storage.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) storage.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(storage.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: _a0
func (_m *UserStorage) SaveUser(_a0 storage.User) (uuid.UUID, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.User) (uuid.UUID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(storage.User) uuid.UUID); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserStorage creates a new instance of UserStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorage {
	mock := &UserStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
