// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	api "github.com/fridrock/avito-shop/api"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: _a0, _a1
func (_m *TokenService) GenerateToken(_a0 api.AuthRequest, _a1 uuid.UUID) (api.AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 api.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(api.AuthRequest, uuid.UUID) (api.AuthResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(api.AuthRequest, uuid.UUID) api.AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(api.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(api.AuthRequest, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: _a0
func (_m *TokenService) ValidateToken(_a0 string) (api.UserInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 api.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (api.UserInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) api.UserInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(api.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
